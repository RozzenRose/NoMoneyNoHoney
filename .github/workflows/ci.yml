name: CI/CD — Build, Test, Push to GHCR

on:
  push:
    branches: [ main ]
  pull_request:

permissions:
  contents: read
  packages: write

jobs:
  build-test-push:
    runs-on: ubuntu-latest

    env:
      IMAGE_BASE: ghcr.io/rozzenrose/report_builder
      IMAGE: ghcr.io/rozzenrose/report_builder:${{ github.sha }}

    steps:
      # 1️ Клонируем код
      - name: Checkout
        uses: actions/checkout@v4

      # 2 Настраиваем Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # 3 Логинимся в GHCR
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 4 Подтягиваем образы зависимостей
      - name: Pull dependency images
        run: |
          docker pull ghcr.io/rozzenrose/currency_aggregator:latest || true
          docker pull ghcr.io/rozzenrose/report_builder:latest || true

      # 5 Сборка образа основного сервиса
      - name: Build main service image
        run: docker build -t "$IMAGE" .

      # 6 Прогон тестов внутри локального образа
      - name: Run tests
        env:
          POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}

          REDIS_HOST: ${{ secrets.REDIS_HOST }}
          REDIS_PORT: ${{ secrets.REDIS_PORT }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          REDIS_DB: ${{ secrets.REDIS_DB }}

          RABBITMQ_HOST: ${{ secrets.RABBITMQ_HOST }}
          RABBITMQ_PORT: ${{ secrets.RABBITMQ_PORT }}
          RABBITMQ_USER: ${{ secrets.RABBITMQ_USER }}
          RABBITMQ_PASSWORD: ${{ secrets.RABBITMQ_PASSWORD }}

          ALGORITHM: ${{ secrets.ALGORITHM }}
          ABSTRACT_API_KEY: ${{ secrets.ABSTRACT_API_KEY}}
          URL_RATE_API: ${{ secrets.URL_RATE_API }}
        run: |
          # Создаем строку с переменными окружения для docker run
          ENV_VARS=""
          for var in POSTGRES_HOST POSTGRES_USER POSTGRES_PASSWORD POSTGRES_DB POSTGRES_PORT \
                     REDIS_HOST REDIS_PORT REDIS_PASSWORD REDIS_DB \
                     RABBITMQ_HOST RABBITMQ_PORT RABBITMQ_USER RABBITMQ_PASSWORD \
                     URL_RATE_API ALGORITHM ABSTRACT_API_KEY; do
            ENV_VARS="$ENV_VARS -e $var"
          done
          
          # Запускаем тесты
          docker run --rm $ENV_VARS "$IMAGE" python -m pytest tests/ -v --tb=short

      # 7️ Публикуем образ в GHCR (только для main)
      - name: Push image to GHCR
        if: github.ref == 'refs/heads/main'
        run: |
          docker tag $IMAGE $IMAGE_BASE:${{ github.sha }}
          docker tag $IMAGE $IMAGE_BASE:latest
          docker push $IMAGE_BASE:${{ github.sha }}
          docker push $IMAGE_BASE:latest
